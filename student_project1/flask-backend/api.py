from transformers import T5Tokenizer, T5ForConditionalGeneration, RobertaTokenizer, EncoderDecoderModel
import torch
from flask import Flask, request, jsonify
from flask_cors import CORS
import traceback

app = Flask(__name__)
CORS(app)

# ✅ Load T5 model
T5_MODEL_PATH = "./t5-nl2sql-model4"
t5_tokenizer = T5Tokenizer.from_pretrained(T5_MODEL_PATH)
t5_model = T5ForConditionalGeneration.from_pretrained(T5_MODEL_PATH)

# ✅ Load CodeBERT model
CODEBERT_PATH = "C:\\xampp\\student_project1\\output\\codebert-nl2sql-cleaned"
codebert_tokenizer = RobertaTokenizer.from_pretrained(CODEBERT_PATH)
codebert_model = EncoderDecoderModel.from_pretrained(CODEBERT_PATH)
codebert_model.config.decoder_start_token_id = 0   # <s>
codebert_model.config.pad_token_id = 1             # <pad>
codebert_model.config.eos_token_id = 2             # </s>

@app.route('/')
def home():
    return "T5 + CodeBERT NL2SQL API is running!"

@app.route('/nl2sql', methods=['POST'])
def nl2sql():
    try:
        data = request.get_json()
        query = data.get('query', '').strip()
        model_choice = data.get('model', 'T5')

        if not query:
            return jsonify({'error': 'Missing "query" field'}), 400

        sql_query = ""

        # ✅ If CodeBERT is selected
        if model_choice == "CodeBERT":
            input_text = "translate English to SQL: " + query
            inputs = codebert_tokenizer(
                input_text,
                return_tensors="pt",
                truncation=True,
                padding="max_length",
                max_length=128
            )

            outputs = codebert_model.generate(
                input_ids=inputs.input_ids,
                attention_mask=inputs.attention_mask,
                max_length=128,
                num_beams=5,
                temperature=1.0,
                repetition_penalty=1.2,
                early_stopping=True,
                decoder_start_token_id=codebert_model.config.decoder_start_token_id,
                pad_token_id=codebert_model.config.pad_token_id,
                eos_token_id=codebert_model.config.eos_token_id
            )

            sql_query = codebert_tokenizer.decode(
                outputs[0], skip_special_tokens=True, clean_up_tokenization_spaces=True
            ).strip()

            print(f" CodeBERT raw output: '{sql_query}'")

            # ✅ If CodeBERT fails, fallback to T5
            if not sql_query or len(sql_query) < 6 or sql_query.lower() in ["no", "none", "null"]:
                print("⚠️ CodeBERT failed. Falling back to T5...")
                model_choice = "T5"  # switch

        # ✅ If model is T5 or fallback triggered
        if model_choice == "T5":
            input_text = "translate to SQL: " + query
            inputs = t5_tokenizer(
                input_text,
                return_tensors="pt",
                truncation=True,
                padding="max_length",
                max_length=128
            )
            outputs = t5_model.generate(
                inputs.input_ids,
                max_length=100,
                num_beams=4,
                early_stopping=True
            )
            sql_query = t5_tokenizer.decode(
                outputs[0], skip_special_tokens=True, clean_up_tokenization_spaces=True
            ).strip()
            print(f"✅ T5 output: '{sql_query}'")

        # ✅ Replace placeholders
        sql_query = sql_query.replace("__LT__", "<").replace("__GT__", ">")

        # ✅ Final check
        if not sql_query or len(sql_query) < 6 or sql_query.lower() in ["no", "none", "null"]:
            return jsonify({'sql': '/* No valid SQL generated by model */'})

        return jsonify({'sql': sql_query})

    except Exception as e:
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
